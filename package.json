{
	"name": "vscode-avr-helper",
	"displayName": "AVR Helper",
	"description": "Helper extension to simplify code compilation and flashing for AVR chips",
	"icon": "resources/icon.png",
	"keywords": [
		"avr",
		"avrdude",
		"avr-gcc",
		"uploader"
	],
	"author": {
		"name": "Alex079"
	},
	"license": "MIT",
	"repository": {
		"url": "https://github.com/Alex079/vscode-avr-helper"
	},
	"publisher": "Alex079",
	"version": "2.1.1",
	"engines": {
		"vscode": "^1.64.2"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onStartupFinished"
	],
	"main": "./dist/extension",
	"contributes": {
		"configuration": [
			{
				"title": "AVR Helper",
				"properties": {
					"AVR.source.compiler": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "Path to the compiler executable file (i.e. avr-c++). It is used to obtain the path to the bin folder and locate other executable files (avr-size and avr-objdump)."
					},
					"AVR.source.libraries": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [],
						"scope": "resource",
						"description": "Paths to folders containing source libraries. The paths are used as base paths for compiler includes and for source file scanning to discover and compile dependencies. AVR GCC built-in headers do not need to be listed."
					},
					"AVR.source.scanning depth": {
						"type": "integer",
						"default": 2,
						"scope": "resource",
						"description": "Maximum depth of source and libraries folders scanning. This limit is used for scanning the root project folder and each library folder."
					},
					"AVR.source.highlight": {
						"type": "boolean",
						"default": false,
						"scope": "resource",
						"description": "Highlight errors and warnings from build terminal. After the build step is finished, the build problems can be marked in editors and in Problems view. By default this option is turned off, because the IDE can perform most of the checks before compilation."
					},
					"AVR.compiler.arguments": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"-g",
							"-Os",
							"-Wall",
							"-Wextra",
							"-fpermissive",
							"-fno-exceptions",
							"-fno-threadsafe-statics",
							"-pipe"
						],
						"scope": "resource",
						"description": "Compiler arguments. Applied when compiling source files into object files. One array item must contain exactly one argument, whitespace within the array items is preserved."
					},
					"AVR.linker.arguments": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"-ffunction-sections",
							"-fdata-sections",
							"-pipe"
						],
						"scope": "resource",
						"description": "Linker arguments. Applied when linking object files into an executable file. One array item must contain exactly one argument, whitespace within the array items is preserved."
					},
					"AVR.disassembler.arguments": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"--disassemble",
							"--source",
							"--line-numbers",
							"--demangle"
						],
						"scope": "resource",
						"description": "Object dump arguments. Applied when producing assembler listing from an executable file. One array item must contain exactly one argument, whitespace within the array items is preserved."
					},
					"AVR.reporter.arguments": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"-A"
						],
						"scope": "resource",
						"description": "Size display arguments. Applied when reporting the size of an executable file, updated automatically when compiler path is updated. One array item must contain exactly one argument, whitespace within the array items is preserved."
					},
					"AVR.hex.dump.enabled": {
						"type": "boolean",
						"default": false,
						"scope": "resource",
						"description": "Produce HEX dump file. After the build step is finished, '.text' and '.data' sections of 'output.elf' file will be written into 'output.hex' file."
					},
					"AVR.listing.enabled": {
						"type": "boolean",
						"default": false,
						"scope": "resource",
						"description": "Produce disassembler listing. After the build step is finished, assembler listing of 'output.elf' file will be written into 'output.lst' file."
					},
					"AVR.compiler.C standard": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "C standard compliance"
					},
					"AVR.compiler.C++ standard": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "C++ standard compliance"
					},
					"AVR.device.type": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "MCU type name from the list provided by avrdude configuration."
					},
					"AVR.device.frequency": {
						"type": [
							"integer",
							"null"
						],
						"default": null,
						"scope": "resource",
						"description": "MCU frequency. When this parameter is set, it defines a value for F_CPU constant. This parameter value is displayed in the status bar but otherwise setting it is fully equivalent to adding '-DF_CPU=${frequency}UL' compiler argument."
					},
					"AVR.programmer.tool": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "Path to programmer tool (avrdude). It is required to obtain the list of supported MCU types and programmer types."
					},
					"AVR.programmer.arguments": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [],
						"scope": "resource",
						"description": "Programmer arguments. Applied when uploading firmware to a device. One array item must contain exactly one argument, whitespace within the array items is preserved."
					},
					"AVR.programmer.definitions": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "Path to programmer definitions (avrdude.conf). This parameter overrides default definitions from user profile folder or from avrdude folder."
					},
					"AVR.programmer.type": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "Programmer type name from the list provided by avrdude configuration."
					},
					"AVR.programmer.port": {
						"type": "string",
						"default": "",
						"scope": "resource",
						"description": "Programmer upload port"
					},
					"AVR.programmer.rate": {
						"type": [
							"integer",
							"null"
						],
						"default": null,
						"scope": "resource",
						"description": "Programmer upload rate"
					}
				}
			}
		],
		"commands": [
			{
				"command": "AVR.command.setup.tools",
				"title": "Perform initial setup",
				"category": "AVR Helper"
			},
			{
				"command": "AVR.command.setup.device",
				"title": "Select device",
				"category": "AVR Helper",
				"enablement": "AVR.command.setup.device.enabled"
			},
			{
				"command": "AVR.command.setup.programmer",
				"title": "Select programmer",
				"category": "AVR Helper",
				"enablement": "AVR.command.setup.programmer.enabled"
			},
			{
				"command": "AVR.command.build",
				"title": "Build",
				"category": "AVR Helper",
				"enablement": "AVR.command.build.enabled"
			},
			{
				"command": "AVR.command.flash",
				"title": "Flash",
				"category": "AVR Helper",
				"enablement": "AVR.command.flash.enabled"
			},
			{
				"command": "AVR.command.build+flash",
				"title": "Build and flash",
				"category": "AVR Helper",
				"enablement": "AVR.command.build+flash.enabled"
			}
		]
	},
	"scripts": {
		"package": "webpack --mode production --devtool source-map",
		"compile": "webpack",
		"watch": "webpack -w",
		"compile-tests": "tsc",
		"watch-tests": "tsc -w",
		"lint": "eslint --ext .ts --fix src src",
		"clean": "rm -rf out dist *.vsix",
		"unit-test": "node out/test/unit/wrapper",
		"ui-test": "extest setup-and-run -s .vscode-test-ui -e out/extensions -m mocha.json 'out/test/ui/**/*.test.js'",
		"test": "yarn run unit-test && yarn run ui-test",
		"pretest": "yarn run lint && rm -rf out && yarn run compile-tests",
		"vscode:prepublish": "rm -rf dist *.vsix && yarn run package"
	},
	"dependencies": {
		"fdir": "^5"
	},
	"devDependencies": {
		"@types/glob": "^8",
		"@types/mocha": "^10",
		"@types/node": "^17",
		"@types/vscode": "^1",
		"@typescript-eslint/eslint-plugin": "^5",
		"@typescript-eslint/parser": "^5",
		"@vscode/test-electron": "^2",
		"eslint": "^8",
		"glob": "^8",
		"mocha": "^10",
		"ts-loader": "^9",
		"ts-node": "^10",
		"typescript": "^4",
		"vscode-extension-tester": "^5",
		"webpack": "^5",
		"webpack-cli": "^5",
		"webpack-node-externals": "^3"
	}
}
